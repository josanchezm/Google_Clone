metodos de abreviacion en vs code

HTML:

li*4

li*4>a 

ul>li*4>a 

nos ayuda a crear estructuras en html mas rapido 

cuando aparecen margenes o paddings que no entendemos porque estan, recordemos que debemos reiniciar los
estilos tanto del body como demas etiquetas que por defecto posean paddings o margins

en este caso reinicie: 

body {
    margin: 0;
    padding: 0;
}
ul {
    padding: 0;
}

soluciono: 

100vh en main grid sin generar scroll vertical
100% width en el footer sin generar scroll horizontal
posicionamiento de elementos del footer simplemente usando el padding del nav
varios estilos poco practicos pudieron ser eliminados gracias a que ya no contamos con estos problemas de
posicionamiento de elementos 

el box sizing border box en el universal tambien es importamente para que no se adicionen extras de paddings y 
margins a las dimensiones de elementos, generandonos posibles scrolls 


estos cambios anteriores, al facilitar el usar el height de 100vh en la main grid del proyecto, me ayudaron a 
hacer lo que queria, que es que mi grid principal ocupe el 100% del ancho y alto del body, de esta forma al 
establecer en grid template rows auto 1fr auto, el header y footer acoplan su alto estrictamente al tama;o de su 
contenido; dejando el resto del alto disponible para el main content, que es donde tenemos el logo de google
junto a su barra de busqueda y botones asddasad

este contenido main lo posicionamos en el medio de su fila horizontal y verticalmente por medio de darle display
flex a main, justify y align center junto a flex direction column 

ahora tenemos una web 100% dinamica que al reducirse el vw no se rompe, solo hay que agregar reglas de css para su 
responsive 

los iconos tambien se pueden hacer mediante background image junto a otras reglas de css, poniendo el link ya no en 
el HTML ni requiriendo etiquetas de img en este ultimo, sino que la url va directo al css 

<li><a href="/"></a></li>

header nav ul li:nth-child(3) {
    background-image: url('https://cdn3.iconfinder.com/data/icons/faticons/32/grid-2-01-512.png');
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    width: 25px;
    height: 25px;
    cursor: pointer;
}

esta forma no me gusto porque no nos permite poner alt, es decir que si la imagen no llega a cargar no hay un texto
de descripcion y asimismo una persona con discapacidad no podria acceder al significado de este elemento, ya que no
tiene alt 

para hacer el input, el icono de lupa se pondra en un span, mientras que el del microfono en un ancla, se debe a que 
la lupa de google no presenta interacciones como un link (el cursor pointer), mientras que el microfono si lo es

para el input, se creo un contenedor principal de section, en donde va un div que es el contenedor del span de la
lupa, del input y del ancla del microfono 

la razon de estos dos contenedores padres es encerrar en input dentro de contenedores mas grandes, y de esta forma 
hacer ese efecto de que el input es una barra rectangular interna, mientras que el resto de la barra de busqueda
se compone de la lupa y microfonos a los costados 

esto nos ayuda a que al pasar el cursor por la barra de busqueda, solo la parte de input da la opcion de escribir,
tambien no necesitamos colocar el texto del input al medio como antes, ya que separamos el input de la lupa y el 
microfono por medio de darme un width menor al input que sus contenedores padres 

<section>
    <div class="input_container">
        <span>
            <img src="https://www.freeiconspng.com/uploads/search-icon-png-2.png" alt="Search icon">
        </span>
        <input type="text" placeholder="Search with Google or type an URL">
        <a href="/"><img src="https://upload.wikimedia.org/wikipedia/commons/2/22/Google_microphone_logo.png" alt="Microphone icon for voice searching"></a>
    </div>        
</section>


main section:nth-child(2) {
    width: 36.39%;
    margin: 0 auto;
    height: 44px;
}

main section .input_container {
    width: 95%;
    height: 100%;
    border: 1px solid var(--input-border-color);
    border-radius: 100px;
    display: flex;
    justify-content: center;
    align-items: center;
}

main section .input_container:hover {
    box-shadow: 0 1px 6px 0 var(--box-shadow-input-color);
    border-color: var(--hover-input-border-color);
}

main section .input_container span {
    width: 14px;
    margin-right: 10px;
}

main section .input_container span img, main section .input_container a img {
    width: 100%;
    object-fit: contain;
}

main section .input_container input {
    outline: none;
    width: 87%;
    height: 34px;
    border: none;
    font-size: var(--md);
}

main section .input_container a {
    width: 14px;
    margin-left: 10px;
}






